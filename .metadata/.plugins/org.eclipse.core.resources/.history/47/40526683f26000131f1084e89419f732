package de.th_wildau.quadroid.connection;


import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

import de.th_wildau.quadroid.interfaces.IDevice;

/**
 * This class contains an list of connected devices, it is necessary 
 * because ports can have two connections
 * 
 * @author Thomas Rohde TM-12, trohde(at)th-wildau.de
 * @version 1.0, 05.12.2013, (JDK 7)
 * 
 * */

public class ConnectionContainer 
{
	/**reference of this class*/
	private static ConnectionContainer cc = null;
	/**save connections*/
	private Set<Connect> devicevector = null;
	
	/**
	 * no public constructor for singleton
	 * */
	private ConnectionContainer()
	{
		cc = this;
		this.devicevector = new HashMap<String,IDevice>();
	}
	
	/**
	 * singleton constructor
	 * @return get an single reference of ConnectionContainer
	 * */
	protected static ConnectionContainer getReference()
	{
		if(cc == null)
			new ConnectionContainer();
		return cc;
	}
	
	/**
	 * this method save connected device
	 * @param device hand over an reference of {@link de.th_wildau.quadroid.interfaces.IDevice}
	 * 
	 * @param ident - hand over an identifier for given device (unique device name)
	 * 
	 * */
	protected void addDevice(String ident, IDevice device)
	{
		if(device == null || ident == null)
			return;
		if(!this.devicevector.containsValue(device))
			this.devicevector.put(ident, device);
	}
	
	/**
	 * this method remove an given device from list
	 * 
	 * @param device hand over an device of {@link de.th_wildau.quadroid.interfaces.IDevice} 
	 * */
	protected void removeDevice(IDevice device)
	{
		if(!this.devicevector.containsValue(device))
			return;
		this.devicevector.remove(device);
	}
	
	/**
	 * this function prove whether a device is connected
	 * 
	 * @param device hand over an device to prove
	 * 
	 * @return return true device is connected, false if not connected
	 * */
	protected boolean isConnected(IDevice device)
	{
		for(IDevice d : this.devicevector.values())
		{	//prove whether port is connected
			if(d.getPort().equals(device.getPort()))
				return true;
		}
		
		return false;
	}
	
	/**
	 * this function get an collection of connected devices
	 * @return return an collection of typ IDevice
	 * */
	public Collection<IDevice> getAlleDevices()
	{	//copy all devices into arraylist and return it
		return this.devicevector.values();
	}
	
	/**
	 * get an specific device 
	 * 
	 * @param deviceName - hand over an key for identifier the device
	 * 
	 * @return get an device of type {@link de.th_wildau.quadroid.interfaces.IDevice},
	 * if no device found return null
	 * 
	 * */
	public IDevice getDevice(String deviceName)
	{
		for(IDevice d : this.getAlleDevices())
		{//search device with unique device name
			if(d.getDeviceName().equals(deviceName))
				return d;
		}
		
		return null;
	}
}
