package de.th_wildau.quadroid.handler;

import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;
import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;

import de.th_wildau.quadroid.QuadroidMain;
import de.th_wildau.quadroid.connection.ConnectTo;
import de.th_wildau.quadroid.interfaces.IReceiver;
import de.th_wildau.quadroid.interfaces.ISerialPortListener;

/**
 * 
 * 
 * @author Thomas Rohde, trohde@th-wildau.de
 * @version 1.0 28.11.2013 (JDK 7)
 * @see ISerialPortListener 
 * 
 * */

public class ReceiverHandler implements ISerialPortListener
{
	/**all observer are save here*/
	private Vector<IReceiver> notyfierList = null;
	
	/**
	 * this function add new observer
	 * all of this will be notify if new data available
	 * 
	 * @param observer - hand over an class reference that implements 
	 * {@link de.th_wildau.quadroid.interfaces.IReceiver} 
	 * */
	public void addIReceiverObserver(IReceiver observer)
	{	//add to list
		this.notyfierList.add(observer);
		ConnectTo.getInstance(QuadroidMain.logger);
	}
	
	/**
	 * this method remove the notifier from list
	 * @param toremovereceiver - remove given reference from 
	 * notifier list
	 * */
	public void removeObserver(IReceiver toremovereceiver)
	{	//remove from list
		this.notyfierList.remove(toremovereceiver);
	}
	
	/**
	 * Constructor
	 * init notyfier list
	 * */
	public ReceiverHandler() 
	{	//init notyfier list
		this.notyfierList = new Vector<IReceiver>();
		ConnectTo.getInstance(QuadroidMain.logger)
		.addSerialPortEventListener(this);
	}
	
	@Override
	public void serialEvent(SerialPortEvent evnt, SerialPort port, 
			InputStream istream, OutputStream ostream, Logger logger) 
	{
		//if data available get in
		if(evnt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
		{	
			logger.info("DataAvailable");
			//buffer for input data
			ByteArrayOutputStream rxbase64buffer =  new ByteArrayOutputStream();
			int rx = 0;
			try 
			{
				while((rx = istream.read()) != -1)
				{
					byte b = (byte)rx;
					if((char)b == '<')//end marker 
						break;
					rxbase64buffer.write(b);//save data into bytestream
				}
			} catch (IOException e) 
			{
				logger.error("Receiver-Exception: ", e);
			}	
				//kill receiving, all data received! last characters are end marker
				port.notifyOnDataAvailable(false);
				
				//decode data from base64 so data bytes
				byte[] data = Base64.decodeBase64(rxbase64buffer.toByteArray()); 
				//notify all observer
				if(data.length >= 4)//only notify if really data are available and no marker
				for(IReceiver receiver : notyfierList)
				{
					receiver.dataInputNotyfier(data);
				}
				try 
				{
					rxbase64buffer.close();//close buffer
				} catch (IOException e)
				{
					logger.error("BufferCloseException", e);
				}
				//reactivate receiving
				port.notifyOnDataAvailable(true);
				
			
		
		}
	}

}
